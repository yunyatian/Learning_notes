NOSQL的使用场景：
	1.对数据的高并发操作
	2.海量数据的独写
	3.对数据的高可扩展性

Redis：
	默认端口：6379
	基于key-value存储
	redis默认有16个库，初始默认为0号库，可以使用select 库号来切换数据库，每个库的密码相同
	单线程+多路IO复用，支持多数据类型，支持持久化

Redis中常用的五大基本数据类型：
	1.String（Redis字符串）
	2.List（Redis列表）
	3.Set（Redis集合）
	4.Hash（Redis哈希）
	5.Zset（Redis有序集合）

Redis中键的操作：
	keys * 查看当前库的所有key
	exists key 判断某个key是否存在
	type key 查看key的类型
	del key 删除指定key数据
	unlink key 根据value选择非阻塞删除，仅将key从keyspace元数据中删除，真正的删除会在后续异步操作
	expire key 时间 为给定的可以设置过期时间
	ttl key 查看还有多少秒过期，-1代表永不过期，-2表示已过期

	select 命令切换数据库
	dbsize 查看当前数据库的key数量
	flushdb 清空当前库
	flushall 通杀全部库

Redis字符串（String）
	String是Redis最基本的类型。一个Redis中字符串value最多可以是512M
	String类型是二进制安全的，意味着Redis的String可以包含任何数据，比如jpg图片或者序列化的对象

	常用命令：
	set key value：添加键值对
	get key：查询对应键值
	append key value：将给定的value追加到原值的末尾
	strlen key：获得值的长度
	setnx key value：只有在key不存在时，才会设置key值，key值存在时不会对原有值进行覆盖，而是不进行操作

	incr key：将key中存储的数字值加1，只能对数字值操作，如果为空，新增值为1
	decr key：将key中存储的数字值减1，只能对数字值操作，如果为空，新增值为-1
	incrby/decrby key 步长：将key中存储的数字值增减自定义步长

	Redis操作是原子性操作，所谓原子性操作是指不会被线程调度机制所打断。这种操作一旦开始，就会一直运行到结束，中间不会切换到任何其他线程
	在单线程中，能够在单条指令中完成的操作都可以认为是原子操作，因为中断只能发生在指令之间
	在多线程中，不能被其他进程打断的操作叫做原子操作，
	Redis单命令的原子性主要得益于Redis的单线程

	mset key1 value1 key2 value2 。。。：同时设置一个或多个键值对
	mget key1 key2 。。。：同时获取一个或多个value
	msetnx key1 value1 key2 value2。。。：同时设置一个或多个键值对，当且仅当所有给定key都不存在
	由于原子性的原因，有一个失败则都失败

	getrange key 起始位置 结束位置：获得值的范围，类似Java中的substring，前包，后包
	setrange key 替换位置 value：用value覆写key所存储的字符串信息，从起始位置开始（索引从0开始）

	setex key 过期时间 value：设置键值的同时，设置过期时间，单位秒
	getset key value：以新换旧，设置新值的同时获得旧值

Redis列表（List）
    redis列表是简单的字符串列表，按照插入顺序进行排序，可以选择是添加在元素头部或者尾部
    Redis列表的底层实际上是一个双向链表，通过索引下标操作中间节点的性能回比较差

    常用命令：
    lpush/rpush key value1 value2 value3...：从左边/右边插入一个或多个值
    从不同方向插值会使得插入的顺序不同，从而获取值的顺序不同

    lpop/rpop key：从左边/右边吐出一个值，值在键在，值光键亡

    rpoplpush key1 key2：从key1列表右边吐出一个值，插到key2列表左边

    lrange key start stop：按照索引下标获得元素（从左到右）
    lrange key 0 -1：获取其中所有的值

    lindex key index：按照索引下标获得元素（从左到右）
    llen key：获取列表的长度

    linsert key before value newvalue： 在value后面插入newvalue值
    lrem key n（数量） value：从左边删除n个value，从左到右

    lset key index value：将列表key下标为index的值替换成value

    数据结构：
    Redis的List的数据结构为快速链表quickList。
    首先需要了解当元素较少时，会使用一块连续的内存存储，这个结构是zipList。即压缩列表。
    quickList是将一个个zipList连接起来构成quickList。

Redis集合（Set）：
    Redis的set功能与List相近，只是添加了自动排重功能。
    Set集合是无序的，底层是一个value的哈希表。所以它的添加，删除，查找的复杂度都是O（1）

    常用命令：
    sadd key value1 value2...：将一个或者多个元素加入到集合key中，已经存在的元素会被忽略
    smembers key：取出该集合的所有值
    sismember key value：判断集合key是否包含该value的值，有1，没有0
    scard key：返回该集合的元素个数
    srem key value1 value2...：删除集合中的元素值
    spop key：随机获得该key下的一个值
    srandmember key n（数量）：随即从该key内取出n个值，不会从集合中删除
    smove source destination value：把集合中的某一个值从一个集合移动到另一个集合中去
    sinter key1 key2：返回两个集合的交集元素
    sunion key1 key2：返回两个集合的并集元素
    sdiff key1 key2：返回两个集合中的差集元素（key1中的，不包含key2中的）

Redis哈希（Hash）：
    Redis hash是一个键值对集合。特别适合存储对象，类似于Java里面的Map<String,Object>

    常用命令：
    hset key field value：将key集合中的field键赋值value
    hget key field：从key集合中的field中取出value
    hmset key1 field1 value1 field2 value2...：批量设置hash的值
    hexists key field：常看Hash表key中，给定域field是否存在
    hkeys key：列出该hash集合所有的field
    hvals key：列出该hash集合的所有value
    hincrby key field increment：为hash表key中的域field的值加上增量increment
    hsetnx key field value：将hash表中key中的域field的值设置为value，当且仅当域field不存在

Redis有序集合Zset（sorted set）：
    Redis有序集合也是一个没有重复元素的Set字符串集合。不同的地方在于有序集合的每一个成员都关联了一个评分，这个评分被用于排序。
    集合的成员是唯一的，但是评分是可以重复的。

    常用命令：
    zadd key score1 value1 score2 value2 ...：将一个或多个元素及其score值加入到有序集key当中

    zrange key start stop [WITHSCORES]：返回有序集key中，下标在start和stop之间的元素，带上WITHSCORES，可以让分数一起和值返回到结果集

    zrangebyscore key min max [withscores] [limit offset count]：返回有序集合key中所有介于min和max之间的（包括等于min或max）成员，
                                                                有序集合成员按score值递增（从小到大）次序排序

    zrevrangebyscore key max min [withscore] [limit offset count]：同上，改为从大到小排序

    zincrby key increment value：为元素的score加上增量increment
    zrem key value：删除该集合下，指定值的元素
    zcount key min max ：统计该集合，分数区间内的元素个数
    zrank key value：返回该值在集合中的排名，从0开始

    数据结构：
    一部分hash表，一部分跳跃表

Redis发布和订阅：
    订阅：SUBSCRIBE channel
    发布：publish channel 发布内容